import pandas as pd
from jinja2 import Environment, FileSystemLoader
import os
from datetime import datetime

def generate_site():
    """
    G√©n√®re le site web statique des pr√©dictions de football.
    """
    print("üöÄ D√©marrage de la g√©n√©ration du site...")

    # Configuration des chemins
    templates_dir = 'src/site_generator/templates'
    static_dir = 'src/site_generator/static'
    output_dir = 'docs'

    # Cr√©er le dossier de sortie s'il n'existe pas
    os.makedirs(output_dir, exist_ok=True)
    os.makedirs(os.path.join(output_dir, 'static'), exist_ok=True)

    # Initialiser Jinja2
    env = Environment(loader=FileSystemLoader(templates_dir))

    # --- Donn√©es pour la page d'accueil (Pr√©dictions du jour) ---
    today_str = datetime.utcnow().strftime('%Y-%m-%d')
    predictions_path = f'data/predictions/daily_elo_predictions_{today_str}.csv'
    predictions_data = []
    if os.path.exists(predictions_path):
        try:
            df_preds = pd.read_csv(predictions_path)
            # Remplacer les NaN par une cha√Æne vide pour l'affichage
            df_preds.fillna('', inplace=True)
            predictions_data = df_preds.to_dict(orient='records')
            print(f"‚úÖ {len(predictions_data)} pr√©dictions du jour charg√©es.")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du chargement des pr√©dictions du jour: {e}")
    else:
        print(f"‚ÑπÔ∏è Aucun fichier de pr√©dictions trouv√© pour aujourd'hui: {predictions_path}")

    # --- Donn√©es pour la page de bilan ---
    summary_path = 'data/analysis/elo_summary.csv'
    summary_data = []
    if os.path.exists(summary_path):
        try:
            df_summary = pd.read_csv(summary_path)
            summary_data = df_summary.to_dict(orient='records')
            print(f"‚úÖ Bilan statistique charg√©: {len(summary_data)} lignes.")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du chargement du bilan: {e}")
    else:
        print(f"‚ÑπÔ∏è Aucun fichier de bilan trouv√©: {summary_path}")

    # Param√®tres communs pour les mod√®les
    template_params = {
        "generation_date": datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')
    }

    # G√©n√©rer index.html
    template_index = env.get_template('index.html')
    index_params = {**template_params, "predictions": predictions_data, "date": today_str}
    with open(os.path.join(output_dir, 'index.html'), 'w', encoding='utf-8') as f:
        f.write(template_index.render(index_params))
    print("‚úÖ Page 'index.html' g√©n√©r√©e.")

    # G√©n√©rer summary.html
    template_summary = env.get_template('summary.html')
    summary_params = {**template_params, "summary": summary_data}
    with open(os.path.join(output_dir, 'summary.html'), 'w', encoding='utf-8') as f:
        f.write(template_summary.render(summary_params))
    print("‚úÖ Page 'summary.html' g√©n√©r√©e.")

    # Copier les fichiers statiques (CSS)
    static_files = os.listdir(static_dir)
    for file_name in static_files:
        full_file_name = os.path.join(static_dir, file_name)
        if os.path.isfile(full_file_name):
            # Utiliser shutil pour une copie plus robuste
            import shutil
            shutil.copy(full_file_name, os.path.join(output_dir, 'static', file_name))
    print(f"‚úÖ {len(static_files)} fichier(s) statique(s) copi√©(s).")

    print("üéâ Site g√©n√©r√© avec succ√®s !")

if __name__ == "__main__":
    generate_site()
