"""
Ce script est responsable de la mise √† jour des pr√©dictions historiques avec
leurs r√©sultats de match r√©els.

R√¥le :
- Charge l'historique complet des pr√©dictions Elo.
- Charge les donn√©es de tous les matchs jou√©s.
- Fusionne ces deux ensembles de donn√©es en se basant sur l'ID du match (fixture_id).
- Filtre pour ne garder que les matchs qui ont √† la fois une pr√©diction et un r√©sultat.
- Sauvegarde ce jeu de donn√©es complet dans `historical_elo_predictions_with_results.csv`.

Ce script est une brique essentielle de la pipeline, car il cr√©e les donn√©es
n√©cessaires au script `elo_summary.py` pour analyser la performance du mod√®le.
"""
import pandas as pd
import numpy as np
import os
import glob
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def update_predictions_with_results():
    """
    Met √† jour les pr√©dictions Elo historiques avec les r√©sultats des matchs.
    """
    logger.info("üöÄ D√©marrage de la mise √† jour des pr√©dictions avec les r√©sultats...")

    # D√©finition des chemins
    predictions_path = 'data/predictions/historical_elo_predictions.csv'
    matches_dir = 'data/matches'
    output_path = 'data/predictions/historical_elo_predictions_with_results.csv'

    # --- Chargement des donn√©es ---

    # Charger les pr√©dictions historiques
    if not os.path.exists(predictions_path):
        logger.error(f"Fichier des pr√©dictions historiques non trouv√©: {predictions_path}")
        return
    try:
        predictions_df = pd.read_csv(predictions_path)
        logger.info(f"‚úÖ {len(predictions_df)} pr√©dictions historiques charg√©es.")
    except Exception as e:
        logger.error(f"Erreur lors du chargement de {predictions_path}: {e}")
        return

    # Charger tous les r√©sultats de matchs
    match_files = glob.glob(os.path.join(matches_dir, '*.csv'))
    if not match_files:
        logger.error(f"Aucun fichier de match trouv√© dans: {matches_dir}")
        return
    try:
        matches_df = pd.concat((pd.read_csv(f) for f in match_files), ignore_index=True)
        logger.info(f"‚úÖ {len(matches_df)} r√©sultats de matchs charg√©s depuis {len(match_files)} fichiers.")
    except Exception as e:
        logger.error(f"Erreur lors de la concat√©nation des fichiers de matchs: {e}")
        return

    # --- Fusion et traitement ---

    # S√©lectionner les colonnes pertinentes des r√©sultats
    results_cols = ['fixture_id', 'home_goals_fulltime', 'away_goals_fulltime']
    if not all(col in matches_df.columns for col in results_cols):
        # Fallback si les colonnes 'fulltime' n'existent pas
        results_cols = ['fixture_id', 'home_goals', 'away_goals']
        if not all(col in matches_df.columns for col in results_cols):
            logger.error("Les colonnes de score ('home_goals', 'away_goals') sont introuvables.")
            return
        matches_df.rename(columns={'home_goals': 'home_goals_fulltime', 'away_goals': 'away_goals_fulltime'}, inplace=True)

    results_df = matches_df[results_cols]

    # Fusionner les pr√©dictions avec les r√©sultats
    merged_df = pd.merge(predictions_df, results_df, on='fixture_id', how='left')

    # Filtrer pour ne garder que les matchs avec des r√©sultats
    final_df = merged_df.dropna(subset=['home_goals_fulltime', 'away_goals_fulltime'])
    logger.info(f"üìä {len(final_df)} matchs avec pr√©dictions et r√©sultats trouv√©s.")

    if final_df.empty:
        logger.warning("Aucun match correspondant avec des r√©sultats complets n'a √©t√© trouv√©. Le fichier de sortie ne sera pas mis √† jour.")
        # On cr√©e quand m√™me un fichier vide avec les bonnes colonnes pour la suite du workflow
        final_df = pd.DataFrame(columns=merged_df.columns)
    else:
        # Assurer que les types de donn√©es sont corrects
        final_df['home_goals_fulltime'] = final_df['home_goals_fulltime'].astype(int)
        final_df['away_goals_fulltime'] = final_df['away_goals_fulltime'].astype(int)

    # --- Sauvegarde ---
    try:
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        final_df.to_csv(output_path, index=False)
        logger.info(f"üíæ Fichier de r√©sultats combin√©s sauvegard√© dans: {output_path}")
    except Exception as e:
        logger.error(f"Erreur lors de la sauvegarde du fichier final: {e}")

    logger.info("‚úÖ Mise √† jour termin√©e.")

def main():
    """Point d'entr√©e principal du script."""
    update_predictions_with_results()

if __name__ == "__main__":
    main()
