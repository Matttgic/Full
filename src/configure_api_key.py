#!/usr/bin/env python3
"""
Configuration de la cl√© RAPIDAPI pour le syst√®me de pr√©dictions
"""

import os
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def configure_api_key():
    """Configure la cl√© RAPIDAPI dans l'environnement"""
    
    # Votre cl√© RAPIDAPI
    RAPIDAPI_KEY = 'e1e76b8e3emsh2445ffb97db0128p158afdjsnb3175ce8d916'
    
    # D√©finir dans l'environnement
    os.environ['RAPIDAPI_KEY'] = RAPIDAPI_KEY
    
    logger.info("‚úÖ RAPIDAPI_KEY configur√©e dans l'environnement")
    
    # Test de la cl√©
    try:
        from daily_predictions_workflow import DailyPredictionsWorkflow
        
        workflow = DailyPredictionsWorkflow(RAPIDAPI_KEY)
        logger.info(f"‚úÖ Connexion API test√©e avec succ√®s")
        logger.info(f"üìä Donn√©es historiques disponibles: {len(workflow.historical_odds_data):,}")
        logger.info(f"üéØ Matrice de r√©f√©rence: {workflow.historical_feature_matrix.shape[0]} matchs")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test API: {e}")
        return False

def create_env_file():
    """Cr√©e un fichier .env avec la cl√© API"""
    
    env_content = """# Configuration du syst√®me de pr√©dictions football
RAPIDAPI_KEY=e1e76b8e3emsh2445ffb97db0128p158afdjsnb3175ce8d916

# Instructions d'utilisation:
# Source ce fichier avant de lancer les scripts:
# source .env
# puis: python3 daily_predictions_workflow.py
"""
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        logger.info("‚úÖ Fichier .env cr√©√© avec votre cl√© API")
        logger.info("üí° Usage: source .env avant de lancer les scripts")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation .env: {e}")
        return False

def main():
    """Configuration compl√®te"""
    logger.info("üîë === CONFIGURATION CLEF API ===")
    
    # Configurer dans l'environnement actuel
    if configure_api_key():
        logger.info("‚úÖ Configuration r√©ussie")
    else:
        logger.error("‚ùå Configuration √©chou√©e")
        return
    
    # Cr√©er fichier .env pour utilisation future
    create_env_file()
    
    logger.info("\nüöÄ === SYST√àME PR√äT ===")
    logger.info("Vous pouvez maintenant utiliser:")
    logger.info("‚Ä¢ python3 daily_predictions_workflow.py")
    logger.info("‚Ä¢ python3 scheduler_predictions.py")
    logger.info("‚Ä¢ python3 quick_start.py --run")
    
    logger.info("\nüìã Ou pour les sessions futures:")
    logger.info("‚Ä¢ source .env")
    logger.info("‚Ä¢ python3 daily_predictions_workflow.py")

if __name__ == "__main__":
    main()
