#!/usr/bin/env python3
"""
Scheduler pour le workflow quotidien de pr√©dictions
Lance les pr√©dictions √† des heures d√©finies
"""

import schedule
import time
import logging
import subprocess
import os
from datetime import datetime

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scheduler_predictions.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def run_daily_predictions():
    """Lance le workflow quotidien de pr√©dictions"""
    logger.info("üîÑ Lancement du workflow quotidien de pr√©dictions...")
    
    try:
        # Ex√©cuter le script de pr√©dictions
        result = subprocess.run(
            ["python3", "/app/daily_predictions_workflow.py"],
            capture_output=True,
            text=True,
            cwd="/app"
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ Workflow de pr√©dictions termin√© avec succ√®s")
            logger.info(f"Output: {result.stdout[-500:]}")  # Derni√®res 500 chars
        else:
            logger.error(f"‚ùå Erreur dans le workflow: {result.stderr}")
            
    except Exception as e:
        logger.error(f"‚ùå Exception lors du lancement: {e}")

def run_results_updater():
    """Met √† jour les pr√©dictions avec les r√©sultats r√©els"""
    logger.info("üîÑ Lancement de la mise √† jour des r√©sultats...")

    try:
        result = subprocess.run(
            ["python3", "/app/results_updater.py"],
            capture_output=True,
            text=True,
            cwd="/app"
        )

        if result.returncode == 0:
            logger.info("‚úÖ Mise √† jour des r√©sultats termin√©e")
        else:
            logger.warning(f"‚ö†Ô∏è Avertissement mise √† jour r√©sultats: {result.stderr[:200]}")

    except Exception as e:
        logger.error(f"‚ùå Exception lors de la mise √† jour des r√©sultats: {e}")

def run_data_collection():
    """Lance la collecte de donn√©es (optionnel - sync avec les autres workflows)"""
    logger.info("üîÑ Lancement de la collecte de donn√©es...")
    
    try:
        # Lancer la mise √† jour des donn√©es de matchs
        result1 = subprocess.run(
            ["python3", "/app/football_data_updater.py"],
            capture_output=True,
            text=True,
            cwd="/app"
        )
        
        if result1.returncode == 0:
            logger.info("‚úÖ Mise √† jour des donn√©es de matchs termin√©e")
        else:
            logger.warning(f"‚ö†Ô∏è Avertissement mise √† jour matchs: {result1.stderr[:200]}")
        
        # Petite pause
        time.sleep(30)
        
        # Lancer la collecte des cotes
        result2 = subprocess.run(
            ["python3", "/app/football_odds_collector.py"],
            capture_output=True,
            text=True,
            cwd="/app"
        )
        
        if result2.returncode == 0:
            logger.info("‚úÖ Collecte des cotes termin√©e")
        else:
            logger.warning(f"‚ö†Ô∏è Avertissement collecte cotes: {result2.stderr[:200]}")

        # Mettre √† jour les r√©sultats des matchs
        run_results_updater()

    except Exception as e:
        logger.error(f"‚ùå Exception lors de la collecte: {e}")

def main():
    """Configuration du scheduler"""
    logger.info("üöÄ === D√âMARRAGE DU SCHEDULER DE PR√âDICTIONS ===")
    
    # V√©rifier que la cl√© API est disponible
    if not os.environ.get('RAPIDAPI_KEY'):
        logger.error("‚ö†Ô∏è RAPIDAPI_KEY non trouv√©e dans les variables d'environnement")
        return
    
    # Programmer les t√¢ches
    
    # Collecte de donn√©es et pr√©dictions le matin (06:00)
    schedule.every().day.at("06:00").do(run_data_collection)
    schedule.every().day.at("06:30").do(run_daily_predictions)
    
    # Mise √† jour des pr√©dictions en milieu de journ√©e (12:00)
    schedule.every().day.at("12:00").do(run_daily_predictions)
    
    # Mise √† jour des pr√©dictions en soir√©e (18:00)
    schedule.every().day.at("18:00").do(run_data_collection)
    schedule.every().day.at("18:30").do(run_daily_predictions)
    
    # Pr√©dictions finales de la journ√©e (21:00)
    schedule.every().day.at("21:00").do(run_daily_predictions)
    
    logger.info("üìÖ Scheduler configur√©:")
    logger.info("   - 06:00: Collecte donn√©es + mise √† jour r√©sultats")
    logger.info("   - 06:30: Pr√©dictions matinales")
    logger.info("   - 12:00: Pr√©dictions midi")
    logger.info("   - 18:00: Collecte donn√©es + mise √† jour r√©sultats")
    logger.info("   - 18:30: Pr√©dictions soir√©e")
    logger.info("   - 21:00: Pr√©dictions finales")
    
    # Lancer une premi√®re fois imm√©diatement pour test
    logger.info("üîÑ Lancement initial pour test...")
    run_daily_predictions()
    
    # Boucle principale
    logger.info("‚è∞ Scheduler en cours d'ex√©cution...")
    
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # V√©rifier toutes les minutes
            
            # Log de statut toutes les heures
            current_time = datetime.now()
            if current_time.minute == 0:
                logger.info(f"‚è∞ Scheduler actif - {current_time.strftime('%H:%M')} - Prochaine t√¢che: {schedule.next_run()}")
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Arr√™t du scheduler demand√©")
            break
        except Exception as e:
            logger.error(f"‚ùå Erreur dans le scheduler: {e}")
            time.sleep(300)  # Attendre 5 minutes avant de reprendre

if __name__ == "__main__":
    main()
