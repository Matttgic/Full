name: Complete Football Odds Collection - Fixed

on:
  workflow_dispatch:
    inputs:
      league_filter:
        description: 'Filtrer par ligue (ex: ENG1,FRA1)'
        required: false
        default: ''
        type: string
      batch_size:
        description: 'Taille des batches'
        required: false
        default: '25'
        type: string

jobs:
  collect-complete-odds:
    runs-on: ubuntu-latest
    timeout-minutes: 480
    
    # AJOUT: Permissions explicites pour √©viter les probl√®mes
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pandas numpy urllib3

    - name: Create data structure
      run: |
        mkdir -p data/odds/raw_data
        mkdir -p data/odds/summaries
        echo "Structure cr√©√©e dans data/odds/"

    - name: Check resources
      run: |
        echo "=== RESSOURCES ==="
        df -h
        free -h
        echo "=== FICHIERS EXISTANTS ==="
        ls -la data/ 2>/dev/null || echo "Pas de dossier data"
        ls -la data/odds/raw_data/ 2>/dev/null || echo "Pas de donn√©es odds"

    # MODIFICATION: Test API plus robuste
    - name: Test API
      env:
        RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
      run: |
        python3 << 'EOF'
import requests
import os
import sys

print("üîç Test de l'API...")
headers = {
    'x-rapidapi-host': 'api-football-v1.p.rapidapi.com', 
    'x-rapidapi-key': os.environ.get('RAPIDAPI_KEY', '')
}

if not headers['x-rapidapi-key']:
    print("‚ùå RAPIDAPI_KEY manquante!")
    sys.exit(1)

print(f"üîë Cl√© API: {headers['x-rapidapi-key'][:10]}...")

try:
    response = requests.get(
        'https://api-football-v1.p.rapidapi.com/v3/status', 
        headers=headers, 
        timeout=15
    )
    print(f"üì° Status code: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ API OK - Plan: {data.get('subscription', {}).get('plan', 'N/A')}")
        print(f"üìä Requ√™tes restantes: {data.get('subscription', {}).get('requests_remaining', 'N/A')}")
    else:
        print(f"‚ùå Erreur API: {response.status_code}")
        print(f"üìù R√©ponse: {response.text[:200]}")
        sys.exit(1)
        
except Exception as e:
    print(f"‚ùå Erreur: {e}")
    sys.exit(1)
EOF

    - name: Configure parameters
      run: |
        echo "LEAGUE_FILTER=${{ github.event.inputs.league_filter || '' }}" >> $GITHUB_ENV
        echo "BATCH_SIZE=${{ github.event.inputs.batch_size || '25' }}" >> $GITHUB_ENV
        echo "Filtrage: '${{ github.event.inputs.league_filter || 'TOUTES' }}'"
        echo "Batch: ${{ github.event.inputs.batch_size || '25' }}"

    # MODIFICATION: V√©rification que le script existe
    - name: Check script exists
      run: |
        if [ ! -f "complete_football_odds_collector.py" ]; then
          echo "‚ùå Script complete_football_odds_collector.py introuvable!"
          ls -la *.py || echo "Aucun fichier Python trouv√©"
          exit 1
        fi
        echo "‚úÖ Script trouv√©"

    - name: Prepare script
      run: |
        cp complete_football_odds_collector.py complete_football_odds_collector_filtered.py
        
        if [ ! -z "$LEAGUE_FILTER" ]; then
          echo "üîß Filtrage par ligues: $LEAGUE_FILTER"
          python3 << 'EOF'
import os

# Lire le fichier
with open('complete_football_odds_collector_filtered.py', 'r', encoding='utf-8') as f:
    content = f.read()

# Obtenir les ligues filtr√©es
leagues_str = os.environ.get('LEAGUE_FILTER', '').strip()
if leagues_str:
    leagues = [x.strip().upper() for x in leagues_str.split(',') if x.strip()]
    print(f"üéØ Ligues cibl√©es: {leagues}")
    
    # Modifier le contenu pour filtrer
    filter_code = f"""
        # Filtrage automatique des ligues
        filtered_leagues = {leagues}
        original_leagues = dict(self.all_leagues)
        self.all_leagues = {{k: v for k, v in original_leagues.items() if k in filtered_leagues}}
        logger.info(f"üéØ Filtrage appliqu√©: {{len(self.all_leagues)}}/{{len(original_leagues)}} ligues")
"""
    
    # Ins√©rer le code de filtrage apr√®s l'initialisation
    marker = "# Saisons √† analyser"
    if marker in content:
        content = content.replace(marker, filter_code + "\n        " + marker)
        
        with open('complete_football_odds_collector_filtered.py', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Script filtr√© cr√©√©")
    else:
        print("‚ö†Ô∏è Marqueur de filtrage non trouv√©, script non modifi√©")
else:
    print("‚ÑπÔ∏è Aucun filtrage appliqu√©")
EOF
        else
          echo "‚ÑπÔ∏è Aucun filtrage"
        fi

    # MODIFICATION: Ex√©cution avec gestion d'erreurs am√©lior√©e
    - name: Run odds collection
      env:
        RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
      run: |
        echo "üöÄ D√âBUT COLLECTE: $(date)"
        echo "üìù Configuration:"
        echo "   - Filtrage: ${LEAGUE_FILTER:-'Toutes les ligues'}"
        echo "   - Batch size: ${BATCH_SIZE:-'25'}"
        
        # Ex√©cution avec capture d√©taill√©e des erreurs
        set -e  # Arr√™ter en cas d'erreur
        
        if python3 complete_football_odds_collector_filtered.py 2>&1 | tee collection.log; then
          echo "‚úÖ Script ex√©cut√© avec succ√®s"
        else
          exit_code=$?
          echo "‚ùå Script √©chou√© avec code: $exit_code"
          echo ""
          echo "=== DERNI√àRES LIGNES DU LOG ==="
          tail -50 collection.log || echo "Pas de log disponible"
          echo ""
          echo "=== ERREURS PYTHON ==="
          grep -i "error\|exception\|traceback" collection.log || echo "Pas d'erreur Python d√©tect√©e"
          exit $exit_code
        fi
        
        echo "üèÅ FIN COLLECTE: $(date)"

    # MODIFICATION: Analyse d√©taill√©e des r√©sultats
    - name: Analyze results
      run: |
        echo "=== ANALYSE DES R√âSULTATS ==="
        
        # V√©rifier la structure
        echo "üìÅ Structure des dossiers:"
        find data/ -type d | sort || echo "Pas de structure data/"
        
        echo ""
        echo "üìä Fichiers cr√©√©s:"
        if [ -d "data/odds/raw_data" ]; then
          files=$(find data/odds/raw_data -name "*.csv" | wc -l)
          echo "  üìà Fichiers CSV raw: $files"
          
          if [ $files -gt 0 ]; then
            echo "  üìã D√©tail des fichiers:"
            for file in data/odds/raw_data/*.csv; do
              if [ -f "$file" ]; then
                lines=$(wc -l < "$file")
                size=$(du -h "$file" | cut -f1)
                echo "    - $(basename "$file"): $((lines-1)) lignes, $size"
              fi
            done
            
            # Compter le total de cotes
            total_odds=0
            for file in data/odds/raw_data/*.csv; do
              if [ -f "$file" ]; then
                count=$(tail -n +2 "$file" | wc -l)
                total_odds=$((total_odds + count))
              fi
            done
            echo "  üéØ Total cotes collect√©es: $total_odds"
          fi
        else
          echo "  ‚ùå Dossier raw_data non cr√©√©"
        fi
        
        echo ""
        echo "üìÑ R√©sum√©s cr√©√©s:"
        if [ -d "data/odds/summaries" ]; then
          summary_files=$(find data/odds/summaries -name "*.csv" | wc -l)
          echo "  üìä Fichiers r√©sum√©s: $summary_files"
        else
          echo "  ‚ùå Dossier summaries non cr√©√©"
        fi
        
        echo ""
        echo "üóÉÔ∏è M√©tadonn√©es:"
        if [ -f "data/odds/collection_metadata.json" ]; then
          echo "  ‚úÖ M√©tadonn√©es cr√©√©es"
        else
          echo "  ‚ùå M√©tadonn√©es manquantes"
        fi

    # MODIFICATION: Commit intelligent am√©lior√©
    - name: Smart commit
      run: |
        git config user.name "GitHub Action"
        git config user.email "action@github.com"
        
        echo "=== PR√âPARATION DU COMMIT ==="
        
        # V√©rifier s'il y a des changements
        if [ -z "$(git status --porcelain)" ]; then
          echo "‚ÑπÔ∏è Aucun changement d√©tect√©"
          exit 0
        fi
        
        # Analyser les fichiers √† committer
        echo "üìä Analyse des fichiers modifi√©s:"
        git status --porcelain
        
        # Ajouter les fichiers par cat√©gorie
        files_added=0
        
        # 1. M√©tadonn√©es et logs (toujours s√ªrs)
        git add data/odds/collection_metadata.json 2>/dev/null && files_added=$((files_added + 1)) || true
        git add *.log 2>/dev/null && files_added=$((files_added + 1)) || true
        
        # 2. R√©sum√©s (g√©n√©ralement petits)
        if [ -d "data/odds/summaries" ]; then
          git add data/odds/summaries/*.csv 2>/dev/null && files_added=$((files_added + 1)) || true
        fi
        
        # 3. Donn√©es brutes avec v√©rification de taille
        large_files=0
        standard_files=0
        total_size=0
        
        if [ -d "data/odds/raw_data" ]; then
          for file in data/odds/raw_data/*.csv; do
            if [ -f "$file" ]; then
              # Obtenir la taille du fichier (compatible Linux/macOS)
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
              total_size=$((total_size + size))
              
              if [ "$size" -gt 75000000 ]; then  # 75MB
                large_files=$((large_files + 1))
                echo "  ‚ö†Ô∏è Fichier volumineux ignor√©: $(basename "$file") ($(($size / 1024 / 1024))MB)"
              else
                git add "$file" 2>/dev/null && standard_files=$((standard_files + 1)) || true
                echo "  ‚úÖ Ajout√©: $(basename "$file") ($(($size / 1024 / 1024))MB)"
              fi
            fi
          done
        fi
        
        echo ""
        echo "üìà R√©sum√©:"
        echo "  üìÅ Fichiers standards ajout√©s: $standard_files"
        echo "  üö´ Fichiers volumineux ignor√©s: $large_files"
        echo "  üíæ Taille totale: $(($total_size / 1024 / 1024))MB"
        
        # Cr√©er le commit si des fichiers ont √©t√© ajout√©s
        if ! git diff --staged --quiet; then
          # Cr√©er un message de commit d√©taill√©
          commit_msg="üìä Collecte odds compl√®te - $(date '+%Y-%m-%d %H:%M')

üéØ Configuration:
- Filtrage: ${{ github.event.inputs.league_filter || 'Toutes ligues' }}
- Batch size: ${{ github.event.inputs.batch_size || '25' }}

üìà R√©sultats:
- Fichiers standards: $standard_files
- Fichiers volumineux: $large_files (non committ√©s)
- Taille donn√©es: $(($total_size / 1024 / 1024))MB

ü§ñ Collecte automatique via GitHub Actions"

          git commit -m "$commit_msg"
          
          # Tenter le push avec retry
          max_attempts=3
          for attempt in $(seq 1 $max_attempts); do
            if git push; then
              echo "‚úÖ Push r√©ussi (tentative $attempt)"
              break
            else
              if [ $attempt -lt $max_attempts ]; then
                echo "‚ö†Ô∏è Push √©chou√©, nouvelle tentative dans 5s..."
                sleep 5
              else
                echo "‚ùå Push d√©finitivement √©chou√© apr√®s $max_attempts tentatives"
                exit 1
              fi
            fi
          done
          
          echo "üéâ Donn√©es commit√©es et pouss√©es avec succ√®s"
        else
          echo "‚ÑπÔ∏è Aucun fichier √† committer apr√®s filtrage par taille"
        fi

    # MODIFICATION: Upload d'artefacts plus complet
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: odds-collection-${{ github.run_number }}
        path: |
          data/odds/**/*.csv
          data/odds/**/*.json
          *.log
          complete_football_odds_collector_filtered.py
        retention-days: 30
        if-no-files-found: warn

    - name: Final report
      if: always()
      run: |
        echo "=== RAPPORT FINAL ==="
        echo "üïí Date: $(date)"
        echo "üìä Status job: ${{ job.status }}"
        echo "üèÉ Run ID: ${{ github.run_id }}"
        
        # Statistiques finales
        if [ -d "data/odds" ]; then
          total_size=$(du -sh data/odds 2>/dev/null | cut -f1)
          echo "üíæ Taille totale: $total_size"
          
          csv_count=$(find data/odds -name "*.csv" 2>/dev/null | wc -l)
          echo "üìà Fichiers CSV: $csv_count"
          
          if [ -f "data/odds/collection_metadata.json" ]; then
            echo "üóÉÔ∏è M√©tadonn√©es: ‚úÖ"
          else
            echo "üóÉÔ∏è M√©tadonn√©es: ‚ùå"
          fi
        else
          echo "‚ùå Dossier data/odds non cr√©√©"
        fi
        
        # Logs d'erreur s'il y en a
        if [ -f "collection.log" ]; then
          error_count=$(grep -c -i "error\|exception\|failed" collection.log || echo "0")
          echo "‚ö†Ô∏è Erreurs d√©tect√©es: $error_count"
          
          if [ "$error_count" -gt 0 ]; then
            echo ""
            echo "=== DERNI√àRES ERREURS ==="
            grep -i "error\|exception\|failed" collection.log | tail -10 || echo "Aucune erreur trouv√©e"
          fi
        fi
        
        echo ""
        echo "üéØ Artefacts: odds-collection-${{ github.run_number }}"
        echo "‚è∞ R√©tention: 30 jours"
        echo ""
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "üéâ COLLECTE TERMIN√âE AVEC SUCC√àS!"
        else
          echo "‚ùå COLLECTE √âCHOU√âE - Consultez les logs et artefacts"
        fi
