# .github/workflows/football_players_update.yml
name: Football Players Data Update (Mise √† jour hebdomadaire)

# D√©clenchement tous les mercredis √† 8h00 UTC
on:
  schedule:
    - cron: '0 8 * * 3'  # Tous les mercredis √† 8h00 UTC
  workflow_dispatch:  # Permet de lancer manuellement le workflow

jobs:
  update-players-data:
    runs-on: ubuntu-latest
    
    steps:
    # √âtape 1: Checkout du code
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # R√©cup√®re tout l'historique pour avoir les fichiers existants
    
    # √âtape 2: Configuration de Python
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    # √âtape 3: Installation des d√©pendances
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pandas
    
    # √âtape 4: V√©rification de la structure des donn√©es existantes
    - name: Check existing data structure
      run: |
        echo "=== STRUCTURE DES DONN√âES EXISTANTES ==="
        ls -la data/ || echo "Dossier data/ inexistant"
        echo ""
        echo "=== MATCHS DISPONIBLES ==="
        ls -la data/matches/ || echo "Aucun dossier matches/"
        echo ""
        echo "=== DONN√âES JOUEURS EXISTANTES ==="
        ls -la data/players/ || echo "Aucun dossier players/"
        echo ""
        if [ -d "data/players/player_stats" ]; then
          echo "Stats joueurs existantes:"
          ls -la data/players/player_stats/
        fi
        echo ""
        if [ -d "data/players/match_lineups" ]; then
          echo "Compositions existantes:"
          ls -la data/players/match_lineups/
        fi
        echo ""
        if [ -d "data/players/team_rosters" ]; then
          echo "Effectifs existants:"
          ls -la data/players/team_rosters/
        fi
    
    # √âtape 5: Cr√©ation de la structure des dossiers si n√©cessaire
    - name: Ensure data structure exists
      run: |
        mkdir -p data/matches
        mkdir -p data/players/player_stats
        mkdir -p data/players/match_lineups
        mkdir -p data/players/team_rosters
        
        # D√©placer les CSV de matchs vers le bon dossier si n√©cessaire
        find data/ -maxdepth 1 -name "*.csv" -type f -exec mv {} data/matches/ \; 2>/dev/null || true
        
        echo "‚úÖ Structure des dossiers v√©rifi√©e"
    
    # √âtape 6: V√©rification des matchs r√©cents pour mise √† jour
    - name: Check recent matches for update
      run: |
        echo "=== ANALYSE DES MATCHS R√âCENTS ==="
        echo "Date actuelle: $(date)"
        echo "P√©riode d'analyse: 7 derniers jours"
        echo ""
        
        for file in data/matches/*.csv; do
          if [ -f "$file" ]; then
            league=$(basename "$file" .csv)
            echo "üìä $league:"
            
            # Compter les matchs totaux
            total_matches=$(tail -n +2 "$file" | wc -l)
            echo "  - Total matchs: $total_matches"
            
            # Compter les matchs r√©cents (7 derniers jours)
            recent_date=$(date -d '7 days ago' '+%Y-%m-%d')
            recent_matches=$(tail -n +2 "$file" | awk -F',' -v date="$recent_date" '$3 >= date' | wc -l)
            echo "  - Matchs r√©cents (7j): $recent_matches"
            echo ""
          fi
        done
    
    # √âtape 7: Ex√©cution du script de mise √† jour des stats joueurs
    - name: Run players stats update
      env:
        RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
      run: |
        echo "üöÄ D√©but de la mise √† jour des donn√©es joueurs..."
        python src/data_processing/football_players_updater.py
    
    # √âtape 8: V√©rification des changements apr√®s mise √† jour
    - name: Check changes after update
      run: |
        echo "=== CHANGEMENTS D√âTECT√âS ==="
        git status --porcelain
        echo ""
        echo "=== NOUVELLE STRUCTURE DES DONN√âES ==="
        
        echo "üìä Stats joueurs:"
        if [ -d "data/players/player_stats" ]; then
          ls -la data/players/player_stats/ | grep -E "\.csv$" | wc -l || echo "0"
          echo "Taille totale:" 
          du -h data/players/player_stats/ 2>/dev/null || echo "Calcul impossible"
        fi
        echo ""
        
        echo "üìã Compositions:"
        if [ -d "data/players/match_lineups" ]; then
          ls -la data/players/match_lineups/ | grep -E "\.csv$" | wc -l || echo "0"
        fi
        echo ""
        
        echo "üë• Effectifs:"
        if [ -d "data/players/team_rosters" ]; then
          ls -la data/players/team_rosters/ | grep -E "\.csv$" | wc -l || echo "0"
        fi
    
    # √âtape 9: Commit et push des modifications
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Ajouter tous les nouveaux fichiers et modifications
        git add data/players/
        git add football_players_update.log
        
        # V√©rifier s'il y a des changements √† committer
        if git diff --staged --quiet; then
          echo "‚úÖ Aucune nouvelle donn√©e joueur - donn√©es d√©j√† √† jour"
        else
          echo "üîÑ Nouveaux donn√©es joueurs d√©tect√©es - commit en cours..."
          git commit -m "üèÉ Mise √† jour hebdomadaire des donn√©es joueurs - $(date '+%Y-%m-%d')"
          git push
          echo "‚úÖ Donn√©es joueurs mises √† jour et pouss√©es"
        fi
    
    # √âtape 10: Upload des logs en cas d'erreur
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: football-players-update-logs
        path: |
          football_players_update.log
          football_players.log
    
    # √âtape 11: R√©sum√© final de la mise √† jour
    - name: Display update summary
      run: |
        echo "=== R√âSUM√â DE LA MISE √Ä JOUR JOUEURS ==="
        echo "Date: $(date)"
        echo "Type: Mise √† jour hebdomadaire automatique"
        echo "Fr√©quence: Tous les mercredis √† 8h00 UTC"
        echo ""
        
        echo "üìÅ Structure finale des donn√©es:"
        tree data/ 2>/dev/null || find data/ -type f -name "*.csv" | head -20
        echo ""
        
        echo "üìä R√©sum√© par type de donn√©es:"
        
        # Stats joueurs
        if [ -d "data/players/player_stats" ]; then
          player_files=$(ls data/players/player_stats/*.csv 2>/dev/null | wc -l)
          echo "  üèÉ Stats individuelles: $player_files ligues"
          
          total_players=0
          for file in data/players/player_stats/*.csv; do
            if [ -f "$file" ]; then
              count=$(tail -n +2 "$file" | wc -l)
              total_players=$((total_players + count))
            fi
          done
          echo "      Total stats collect√©es: $total_players"
        fi
        
        # Compositions
        if [ -d "data/players/match_lineups" ]; then
          lineup_files=$(ls data/players/match_lineups/*.csv 2>/dev/null | wc -l)
          echo "  üìã Compositions de matchs: $lineup_files ligues"
        fi
        
        # Effectifs
        if [ -d "data/players/team_rosters" ]; then
          roster_files=$(ls data/players/team_rosters/*.csv 2>/dev/null | wc -l)
          echo "  üë• Effectifs d'√©quipes: $roster_files ligues"
        fi
        
        echo ""
        echo "üíæ Taille totale des donn√©es joueurs:"
        du -h data/players/ 2>/dev/null || echo "Calcul impossible"
        
        echo ""
        echo "üìã Derni√®res lignes du log de mise √† jour:"
        tail -20 football_players_update.log 2>/dev/null || echo "Aucun log trouv√©"
        
        echo ""
        echo "‚úÖ Mise √† jour hebdomadaire termin√©e - Prochaine ex√©cution: mercredi prochain √† 8h00 UTC"
