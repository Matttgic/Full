name: Complete Football Odds Collection

on:
  workflow_dispatch:
    inputs:
      league_filter:
        description: 'Filtrer par ligue (ex: ENG1,FRA1)'
        required: false
        default: ''
        type: string
      batch_size:
        description: 'Taille des batches'
        required: false
        default: '25'
        type: string

jobs:
  collect-complete-odds:
    runs-on: ubuntu-latest
    timeout-minutes: 480
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pandas numpy urllib3

    - name: Create data structure
      run: |
        mkdir -p data/odds/raw_data
        mkdir -p data/odds/summaries
        echo "Structure créée dans data/odds/"

    - name: Check resources
      run: |
        echo "=== RESSOURCES ==="
        df -h
        free -h
        echo "=== FICHIERS EXISTANTS ==="
        ls -la data/ 2>/dev/null || echo "Pas de dossier data"
        ls -la data/odds/raw_data/ 2>/dev/null || echo "Pas de données odds"

    - name: Test API
      env:
        RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
      run: |
        python -c "
import requests, os
headers = {'x-rapidapi-host': 'api-football-v1.p.rapidapi.com', 'x-rapidapi-key': os.environ['RAPIDAPI_KEY']}
try:
    r = requests.get('https://api-football-v1.p.rapidapi.com/v3/status', headers=headers, timeout=10)
    if r.status_code == 200:
        data = r.json()
        print('API OK - Plan:', data.get('subscription', {}).get('plan', 'N/A'))
    else:
        print('Erreur status:', r.status_code)
        exit(1)
except Exception as e:
    print('Erreur API:', e)
    exit(1)
        "

    - name: Configure parameters
      run: |
        echo "LEAGUE_FILTER=${{ github.event.inputs.league_filter || '' }}" >> $GITHUB_ENV
        echo "BATCH_SIZE=${{ github.event.inputs.batch_size || '25' }}" >> $GITHUB_ENV
        echo "Filtrage: '${{ github.event.inputs.league_filter || 'TOUTES' }}'"
        echo "Batch: ${{ github.event.inputs.batch_size || '25' }}"

    - name: Prepare script
      run: |
        cp complete_football_odds_collector.py complete_football_odds_collector_filtered.py
        if [ ! -z "$LEAGUE_FILTER" ]; then
          echo "Filtrage par ligues: $LEAGUE_FILTER"
          python -c "
import os
with open('complete_football_odds_collector_filtered.py', 'r') as f: content = f.read()
leagues = [x.strip().upper() for x in os.environ.get('LEAGUE_FILTER', '').split(',') if x.strip()]
if leagues:
    print('Ligues:', leagues)
    code = 'filtered_leagues = ' + str(leagues) + '\nself.all_leagues = {k: v for k, v in self.all_leagues.items() if k in filtered_leagues}'
    content = content.replace('# Saisons à analyser', code + '\n        # Saisons à analyser')
    with open('complete_football_odds_collector_filtered.py', 'w') as f: f.write(content)
    print('Script filtré créé')
          "
        else
          echo "Aucun filtrage"
        fi

    - name: Run odds collection
      env:
        RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
      run: |
        echo "DÉBUT COLLECTE: $(date)"
        python complete_football_odds_collector_filtered.py 2>&1 | tee collection.log
        echo "FIN COLLECTE: $(date)"

    - name: Analyze results
      run: |
        echo "=== ANALYSE ==="
        if [ -d "data/odds/raw_data" ]; then
          files=$(ls data/odds/raw_data/*.csv 2>/dev/null | wc -l)
          echo "Fichiers créés: $files"
          
          total=0
          for file in data/odds/raw_data/*.csv; do
            if [ -f "$file" ]; then
              count=$(wc -l < "$file")
              count=$((count - 1))
              total=$((total + count))
              echo "$(basename "$file"): $count cotes"
            fi
          done
          echo "Total cotes: $total"
        else
          echo "Pas de données créées"
        fi

    - name: Smart commit
      run: |
        git config user.name "GitHub Action"
        git config user.email "action@github.com"
        
        echo "=== COMMIT ==="
        
        # Ajouter les petits fichiers
        git add data/odds/summaries/*.csv 2>/dev/null || echo "Pas de résumés"
        git add data/odds/collection_metadata.json 2>/dev/null || echo "Pas de metadata"
        git add *.log 2>/dev/null || echo "Pas de logs"
        
        # Gérer les gros fichiers
        large=0
        small=0
        
        if [ -d "data/odds/raw_data" ]; then
          for file in data/odds/raw_data/*.csv; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
              if [ "$size" -gt 75000000 ]; then
                large=$((large + 1))
                echo "Gros fichier: $(basename "$file")"
              else
                small=$((small + 1))
                git add "$file"
              fi
            fi
          done
        fi
        
        echo "Fichiers standards: $small"
        echo "Fichiers volumineux: $large"
        
        if ! git diff --staged --quiet; then
          git commit -m "Collecte odds - $(date '+%Y-%m-%d')
          
Standards: $small | Volumineux: $large
Filtrage: ${{ github.event.inputs.league_filter || 'Toutes' }}"
          git push
          echo "Données commitées"
        else
          echo "Rien à commiter"
        fi

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: odds-collection-${{ github.run_number }}
        path: |
          data/odds/**/*.csv
          *.log
        retention-days: 30
        if-no-files-found: warn

    - name: Final report
      run: |
        echo "=== RAPPORT FINAL ==="
        echo "Date: $(date)"
        echo "Status: ${{ job.status }}"
        
        if [ -d "data/odds" ]; then
          echo "Taille: $(du -sh data/odds | cut -f1)"
          files=$(find data/odds -name "*.csv" | wc -l)
          echo "Fichiers CSV: $files"
        fi
        
        echo "Artifacts: odds-collection-${{ github.run_number }}"
        echo "TERMINÉ !" 
